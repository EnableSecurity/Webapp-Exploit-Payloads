#!/usr/bin/env python
# encoding: utf-8
"""
genpayload.py

Created by Sandro Gauci (sandro@enablesecurity.com) on 2012-05-11.
Copyright (c) 2012 Sandro Gauci. All rights reserved.
"""

import sys
import argparse     
import os
import logging    
import json

major_version = sys.version_info[0]
if major_version == 2:
	from ConfigParser import ConfigParser
elif major_version == 3:
	from configparser import ConfigParser
else:
	print('python version needs to be 2 or 3')
	sys.exit(-1)

help_message = '''
Generates web application exploitation payloads based on existent template
'''                 

def getinclude(path,include):
	commonpath = os.path.abspath(os.path.join(path,'..','..','..','common'))
	fn = os.path.join(commonpath,include)
	fn2 = os.path.join(path,include)
	if os.path.exists(fn):
		f=open(fn,'rb')
		buff = f.read().decode('utf-8')
		f.close()
	else:
		f=open(fn2,'rb')
		buff = f.read().decode('utf-8')
		f.close()
	return buff + "\r\n\r\n"
   

def output(payload,args):
	if args.output:
		f = open(args.output,'wb')
	else:
		f = sys.stdout
	f.write(payload)
	f.close()

def generatepayload(args):
	path = args.payload
	jsvars = str()
	includes = str()
	statusurl = str()                                      
	configfn = os.path.join(path,'config.ini')
	config = ConfigParser()
	config.read(configfn)
	mainconfig = config.items('config')	
	for kv in mainconfig:
		k,v = kv
		jsvars += '%s = %s;\r\n' % (k,json.dumps(v))
	if 'status' in config.sections():
		if config.has_option('status','url'):
			statusurl = config.get('status','url')
	jsvars += 'statusurl = %s;\r\n' % (json.dumps(statusurl))
	jquery = ''
	if config.has_option('dependencies','jquery'):
		jquery = config.get('dependencies','jquery')
		includes += getinclude(path,jquery)     
	for include in config.get('dependencies','include').split():
		includes += getinclude(path,include)
	payloadfile = os.path.join(path,config.get('dependencies','script'))
	f = open(payloadfile,'rb')
	payload = f.read().decode('utf-8')
	f.close()
	payloadstr = '\r\n\r\n'.join([jsvars,includes,payload])
	output(payloadstr,args)
	return(0)



def getargs():
	parser = argparse.ArgumentParser(description=help_message)
	parser.add_argument('payload', help='path to the payload directory')
	parser.add_argument('-o','--output', help='output filename')
	args = parser.parse_args()
	return args

def main(argv=None):
	args = getargs()
	return(generatepayload(args))

if __name__ == "__main__":
	sys.exit(main())
