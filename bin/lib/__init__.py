#!/usr/bin/env python
# encoding: utf-8
"""
__init__.py

Created by obscure on 2013-01-13.
Copyright (c) 2013 __MyCompanyName__. All rights reserved.
"""

import sys
import argparse     
import os
import logging    
import json
import shutil
import urlparse

DEBUG = True

major_version = sys.version_info[0]
if major_version == 2:
	from ConfigParser import ConfigParser, NoSectionError, ParsingError
elif major_version == 3:
	from configparser import ConfigParser, NoSectionError, ParsingError
else:
	print('python version needs to be 2 or 3')
	sys.exit(-1)


def getinclude(path,include):
	includespath = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])),'..','src','includes'))
	fn = os.path.join(includespath,include)
	fn2 = os.path.join(path,include)	
	if os.path.exists(fn):
		f=open(fn,'rb')
		buff = f.read().decode('utf-8')
		f.close()
	else:
		f=open(fn2,'rb')
		buff = f.read().decode('utf-8')
		f.close()
	return buff + "\r\n\r\n"
   

def output(payload,args):
	if args.output:
		f = open(args.output,'wb')
	else:
		f = sys.stdout
	f.write(payload)
	f.close()

def listpayloadparams(args):
	path = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])),'..','src','payloads',args.payload))
	configfn = os.path.join(path,'config.ini')
	if not os.path.exists(configfn):
		raise Exception('Invalid payload directory: %s' % path)
	config = ConfigParser()
	try:
		config.read(configfn)
		mainconfig = config.items('config')	
		locationsconfig = config.items('locations')	
	except NoSectionError as e:
		raise Exception('Invalid config.ini. Missing [config] or [locations] section')
	print("Default parameters for %s:\r\n" % args.payload)
	for kv in mainconfig:
		print("\tparameter: %s\tdefault: %s" % kv)
	for kv in locationsconfig:
		print("\tparameter: %s\tdefault: %s" % kv)


def getparameters(args):	
	path = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])),'..','src','payloads',args.payload))
	defaultsettingsfn = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])),'..','src','config','settings.ini'))
	statusurl = str()                                      
	defaultsettings = ConfigParser()
	defaultsettings.read(defaultsettingsfn)
	try:
		statusurl = defaultsettings.get('status','url')
	except (NoSectionError,ParsingError) as e:
		raise Exception('Invalid settings.ini')
	conf = dict()	
	jsvarsdict = dict()
	jsvars = str()
	locationsdict = dict()
	includes = str()
	configfn = os.path.join(path,'config.ini')
	config = ConfigParser()
	config.read(configfn)
	jsvarsdict['statusurl'] = statusurl
	mainconfig = config.items('config')	
	for kv in mainconfig:
		k,v = kv
		jsvarsdict[k] = v

	locationsconfig = config.items('locations')
	for kv in locationsconfig:
		k,v = kv
		jsvarsdict[k] = v
		locationsdict[k]=v

	for param in args.parameters:
		k,v = param.split('=',1)
		jsvarsdict[k] = v
		if k in locationsdict:
			locationsdict[k] = v

	for k,v in jsvarsdict.items():
		jsvars += '%s = %s;\r\n' % (k,json.dumps(v))	
	if 'status' in config.sections():
		if config.has_option('status','url'):
			statusurl = config.get('status','url')
	jquery = ''
	if config.has_option('dependencies','jquery'):
		jquery = config.get('dependencies','jquery')
		includes += getinclude(path,jquery)     
	for include in config.get('dependencies','include').split():
		includes += getinclude(path,include)
	if config.has_section('includes'):
		for includevar in config.options('includes'):
			includefn = config.get('includes',includevar)
			jsvars += '%s = %s;\r\n' % (includevar,json.dumps(getinclude(path,includefn)))
	payloadfile = os.path.join(path,config.get('dependencies','script'))
	
	conf['jsvarsdict'] = jsvarsdict
	conf['jsvars'] = jsvars
	conf['includes'] = includes
	conf['statusurl'] = statusurl
	conf['payloadfile'] = payloadfile
	conf['includes'] = includes
	conf['jquery'] = jquery
	conf['locationsdict'] = locationsdict
	return conf
	

def generateswfpayload(args):
	filestocopy = ['jquery.js','common.js','swf/checkplayer.js','swf/flXHR.js','swf/flXHR.swf','swf/flensed.js','swf/jquery.flXHRproxy.js','swf/swfobject.js','swf/updateplayer.swf','swf/flCookie.js','swf/flCookie.swf']
	path = args.payload
	htmloutput = '<html>\r\n'
	for jsfn in ['flXHR.js','jquery.js','jquery.flXHRproxy.js','common.js']:
		htmloutput += '<script src="%s"></script>\r\n'%jsfn
	conf = getparameters(args)
	firsturl = conf['locationsdict'].values()[0]
	_urlsplit = urlparse.urlsplit(firsturl)
	if len(_urlsplit.scheme) == 0:
		print('Please pass a full URL rather than a relative path for the SWF output')
		return
	f = open(conf['payloadfile'],'rb')
	payload = f.read().decode('utf-8')
	f.close()
	urlsplit = urlparse.urlsplit(firsturl)
	
	
	baseurl = urlsplit.scheme + '://' + urlsplit.netloc
	codeToAdd = "jQuery.flXHRproxy.registerOptions(%s,{noCacheHeader: false,xmlResponseText:false});jQuery.ajaxSetup({transport:'flXHRproxy'});" % (json.dumps(baseurl))
	payloadstr = '\r\n\r\n'.join([conf['jsvars'],codeToAdd,payload])
	htmloutput += '<script>\r\n' + payloadstr + '\r\n</script>\r\n</html>'
	if not os.path.exists(args.output):
		os.makedirs(args.output)
	includespath = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])),'..','src','includes'))
	for fn in filestocopy:
		shutil.copy(os.path.join(includespath,fn),args.output)
	outfile=open(os.path.join(args.output,'index.html'),'w')
	outfile.write(htmloutput)
	outfile.close()
	return(payloadstr)
	

def generatepayload(args):
	path = payloadsdir = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])),'..','src','payloads',args.payload))
	conf = getparameters(args)
	
	f = open(conf['payloadfile'],'rb')
	payload = f.read().decode('utf-8')
	f.close()
	payloadstr = '\r\n\r\n'.join([conf['jsvars'],conf['includes'],payload])	
	return(payloadstr)

def generatejspayload(args):	
	return(generatepayload(args))

def listpayloads(args):
	payloadsdir = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])),'..','src','payloads'))
	for root, dirs, files in os.walk(payloadsdir):
		if 'config.ini' in files:
			configfn = os.path.join(root,'config.ini')
			config = ConfigParser()
			try:
				config.read(configfn)
				mainconfig = config.items('about')	
			except NoSectionError as e:
				raise Exception('Invalid config.ini. Missing [about] section')
			tmpgroupdir,payloadname = os.path.split(root)
			groupname = os.path.split(tmpgroupdir)[1]
			print("Payload: %s/%s" % (groupname,payloadname))
			for kv in mainconfig:
				print("\t%s:\t%s" % kv)
			print("\r\n")
